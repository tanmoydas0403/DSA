Linked List Cycle II:

Given the head of a linked list, return the node where the cycle
begins. if there is no cycle, return null.
There is a cycle in a linked list if there is some node in the list
that can be reached again by continuously following the next pointer. internally
pos is used to denote the index of the node that tail's next pointer
is connected to (0-indexed). It is -1 if there is no cycle. Note that
pos is not passed as a parameter.


public ListNode detectCycle(ListNode head){
    int length = 0;
    listNode fast = head;
            listNode slow = head;

            while(fast != null && fast.next !== null){
                fast = fast.next.next;
                slow = slow.next;
                if(fast == slow){
                    length = lengthCycle(slow);
                    break;
                }
            }

            if(length == 0){
                return null;
            }

            // find the start node
            ListNode f = head;
            ListNode s = head;

            while(length > 0){
                s = s.next;
                length--;
            }

            //keep moving both forward and they will meet at cycle start
            while( f != s){
                f = f.next;
                s = s.next;
            }
            return s;
}